---
- name: Create inventory
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Add bastion host
      ansible.builtin.add_host:
        name: "{{ lookup('ansible.builtin.env', 'BASTION_HOST') }}"
        ansible_ssh_host: "{{ lookup('ansible.builtin.env', 'BASTION_HOST') }}"
        ansible_ssh_port: "{{ lookup('ansible.builtin.env', 'BASTION_PORT') }}"
        ansible_ssh_user: "{{ lookup('ansible.builtin.env', 'BASTION_USER') }}"
        ansible_ssh_pass: "{{ lookup('ansible.builtin.env', 'BASTION_PASSWORD') }}"
        ansible_become_password: "{{ lookup('ansible.builtin.env', 'BASTION_PASSWORD') }}"
    - name: Add nodes
      ansible.builtin.add_host:
        name: "{{ item }}"
        ansible_ssh_host: "{{ item }}"
        ansible_ssh_port: "{{ lookup('ansible.builtin.env', 'BASTION_PORT') }}"
        ansible_ssh_user: "{{ lookup('ansible.builtin.env', 'BASTION_USER') }}"
        ansible_ssh_pass: "{{ lookup('ansible.builtin.env', 'BASTION_PASSWORD') }}"
        ansible_python_interpreter: /usr/libexec/platform-python
      loop:
        - vscode

- name: Demo Playbook for the ansible-runner API
  hosts: all:!localhost
  gather_facts: false
  vars:
    satellite_url: "{{ lookup('ansible.builtin.env', 'SATELLITE_URL') }}"
    satellite_org: "{{ lookup('ansible.builtin.env', 'SATELLITE_ORG') }}"
    satellite_activationkey: "{{ lookup('ansible.builtin.env', 'SATELLITE_ACTIVATIONKEY') }}"
  tasks:
    - name: Waiting for the port tcp/22 to be open"
      ansible.builtin.wait_for_connection:

    - name: Set config_host variable with ansible_host value
      ansible.builtin.set_fact:
        config_host: "{{ ansible_host }}"

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "/tmp/setup-scripts/"
        state: directory
        mode: '0755'

    - name: Check if setup-server.sh exists
      ansible.builtin.stat:
        path: "./setup-{{ config_host }}.sh"
      delegate_to: localhost
      register: r_script_test

    - name: Copy script file
      when: r_script_test.stat.exists
      ansible.builtin.copy:
        src: "./setup-{{ ansible_host }}.sh"
        dest: "/tmp/setup-scripts/setup-{{ ansible_host }}.sh"
      register: r_result

    - name: Execute setup-node.sh if it exists
      when: r_script_test.stat.exists
      ansible.builtin.shell: "sh -x /tmp/setup-scripts/setup-{{ ansible_host }}.sh > /tmp/setup-scripts/setup-{{ ansible_host }}.log 2>&1"
      become: true
      register: r_result
      environment:
        SATELLITE_URL: "{{ satellite_url }}"
        SATELLITE_ORG: "{{ satellite_org }}"
        SATELLITE_ACTIVATIONKEY: "{{ satellite_activationkey }}"

    - name: Output script result
      ansible.builtin.debug:
        var: r_result.stdout
      when: r_script_test.stat.exists

    - name: Write script result to file
      ansible.builtin.copy:
        content: "{{ r_result.stdout | default(r_result.stderr) | default(r_result) }}"
        dest: "/tmp/{{ ansible_host }}-setup-script.out"
      delegate_to: localhost
      when:
        - r_result is defined

    - name: Output script result
      ansible.builtin.debug:
        var: r_result
      when: r_result is defined

    - name: Fail if stage was failed
      ansible.builtin.fail:
        msg: "Setup failed"
      when:
        - r_result is defined
        - r_result.rc != 0

# - name: Define Windows host and wait for WinRM 5986
#   hosts: localhost
#   gather_facts: false
#   vars:
#     win_host: windows
#     win_user: Administrator
#     win_pass: ansible123!
#   tasks:
#     - name: Add Windows to in-memory inventory
#       ansible.builtin.add_host:
#         name: "{{ win_host }}"
#         groups: windowssrv
#         ansible_connection: winrm
#         ansible_user: "{{ win_user }}"
#         ansible_password: "{{ win_pass }}"
#         ansible_port: 5986
#         ansible_winrm_scheme: https
#         ansible_winrm_transport: credssp
#         ansible_winrm_server_cert_validation: ignore

#     - name: Wait for WinRM HTTPS to be reachable
#       ansible.builtin.wait_for:
#         host: "{{ win_host }}"
#         port: 5986
#         delay: 3
#         timeout: 600

# - name: Upload and run the Windows setup PowerShell script
#   hosts: windowssrv
#   gather_facts: false
#   vars:
#     win_setup_dest: C:\\setup\\windows-setup.ps1
#     win_setup_url: http://gitea:3000/student/aap_active_directory/raw/branch/main/windows-setup.ps1
#   tasks:
#     - name: Ensure setup directory exists
#       ansible.windows.win_file:
#         path: C:\\setup
#         state: directory

#     - name: Check for local windows-setup.ps1 next to this playbook
#       ansible.builtin.stat:
#         path: "{{ playbook_dir }}/windows-setup.ps1"
#       delegate_to: localhost
#       register: r_local_script

#     - name: Copy windows-setup.ps1 from repo to Windows (if present locally)
#       when: r_local_script.stat.exists | default(false)
#       ansible.windows.win_copy:
#         src: "{{ playbook_dir }}/windows-setup.ps1"
#         dest: "{{ win_setup_dest }}"

#     - name: Download windows-setup.ps1 from Gitea (fallback)
#       when: not (r_local_script.stat.exists | default(false))
#       ansible.windows.win_get_url:
#         url: "{{ win_setup_url }}"
#         dest: "{{ win_setup_dest }}"

#     - name: Execute windows-setup.ps1
#       ansible.windows.win_shell: |
#         PowerShell -ExecutionPolicy Bypass -File "{{ win_setup_dest }}"
