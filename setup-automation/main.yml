---
- name: Create inventory
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Add bastion host
      ansible.builtin.add_host:
        name: "{{ lookup('ansible.builtin.env', 'BASTION_HOST') }}"
        ansible_ssh_host: "{{ lookup('ansible.builtin.env', 'BASTION_HOST') }}"
        ansible_ssh_port: "{{ lookup('ansible.builtin.env', 'BASTION_PORT') }}"
        ansible_ssh_user: "{{ lookup('ansible.builtin.env', 'BASTION_USER') }}"
        ansible_ssh_pass: "{{ lookup('ansible.builtin.env', 'BASTION_PASSWORD') }}"
        ansible_become_password: "{{ lookup('ansible.builtin.env', 'BASTION_PASSWORD') }}"
    - name: Add nodes
      ansible.builtin.add_host:
        name: "{{ item }}"
        ansible_ssh_host: "{{ item }}"
        ansible_ssh_port: "{{ lookup('ansible.builtin.env', 'BASTION_PORT') }}"
        ansible_ssh_user: "{{ lookup('ansible.builtin.env', 'BASTION_USER') }}"
        ansible_ssh_pass: "{{ lookup('ansible.builtin.env', 'BASTION_PASSWORD') }}"
        ansible_python_interpreter: /usr/libexec/platform-python
      loop:
        - vscode
        # - windows

    - name: Override connection variables for Windows host
      ansible.builtin.add_host:
        name: windows
        ansible_connection: winrm
        ansible_port: 5986
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_transport: ntlm
        ansible_user: Administrator
        ansible_password: "ansible123!"

- name: Demo Playbook for the ansible-runner API
  hosts: all:!localhost
  gather_facts: false
  vars:
    satellite_url: "{{ lookup('ansible.builtin.env', 'SATELLITE_URL') }}"
    satellite_org: "{{ lookup('ansible.builtin.env', 'SATELLITE_ORG') }}"
    satellite_activationkey: "{{ lookup('ansible.builtin.env', 'SATELLITE_ACTIVATIONKEY') }}"
    guid: "{{ lookup('ansible.builtin.env', 'GUID') }}"
    domain: "{{ lookup('ansible.builtin.env', 'DOMAIN') }}"
  tasks:
    - name: "Waiting for the port tcp/22 to be open"
      ansible.builtin.wait_for_connection:
      when: inventory_hostname != 'windows'

    - name: "Wait for WinRM on tcp/5986 (Windows)"
      when: inventory_hostname == 'windows'
      ansible.builtin.wait_for:
        host: "{{ ansible_host | default(inventory_hostname) }}"
        port: 5986
        delay: 1
        timeout: 180
      delegate_to: localhost

    - name: Set config_host variable with ansible_host value
      ansible.builtin.set_fact:
        config_host: "{{ ansible_host }}"

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "/tmp/setup-scripts/"
        state: directory
        mode: '0755'

    - name: Check if setup-server.sh exists
      when: inventory_hostname != 'windows'
      ansible.builtin.stat:
        path: "./setup-{{ config_host }}.sh"
      delegate_to: localhost
      register: r_script_test

    - name: Copy script file
      when: inventory_hostname != 'windows' and r_script_test.stat.exists
      ansible.builtin.copy:
        src: "./setup-{{ ansible_host }}.sh"
        dest: "/tmp/setup-scripts/setup-{{ ansible_host }}.sh"
      register: r_result

    - name: Execute setup script
      when: inventory_hostname != 'windows' and r_script_test.stat.exists
      ansible.builtin.shell: "sh -x /tmp/setup-scripts/setup-{{ ansible_host }}.sh > /tmp/setup-scripts/setup-{{ ansible_host }}.log 2>&1"
      become: true
      register: r_result
      environment:
        SATELLITE_URL: "{{ satellite_url }}"
        SATELLITE_ORG: "{{ satellite_org }}"
        SATELLITE_ACTIVATIONKEY: "{{ satellite_activationkey }}"
        GUID: "{{ guid }}"
        DOMAIN: "{{ domain }}"

    - name: Copy Windows setup script (PowerShell)
      when: inventory_hostname == 'windows'
      ansible.windows.win_copy:
        src: "./setup-automation/windows-setup.ps1"
        dest: "C:\\Windows\\Temp\\windows-setup.ps1"

    - name: Execute Windows setup script
      when: inventory_hostname == 'windows'
      ansible.windows.win_shell: "powershell -ExecutionPolicy Bypass -File C:\\Windows\\Temp\\windows-setup.ps1"
      register: r_result

    - name: Output script result
      ansible.builtin.debug:
        var: r_result.stdout
      when: r_result is defined

    - name: Write script result to file
      ansible.builtin.copy:
        content: "{{ r_result.stdout | default(r_result.stderr) | default(r_result) }}"
        dest: "/tmp/{{ ansible_host }}-setup-script.out"
      delegate_to: localhost
      when:
        - r_result is defined

    - name: Output script result
      ansible.builtin.debug:
        var: r_result
      when: r_result is defined

    - name: Fail if stage was failed
      ansible.builtin.fail:
        msg: "Setup failed"
      when:
        - r_result is defined
        - r_result.rc != 0
